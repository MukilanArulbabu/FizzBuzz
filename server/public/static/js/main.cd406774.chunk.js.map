{"version":3,"sources":["components/header.js","components/console.js","components/alerts.js","components/home.js","components/loader.js","components/login.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","width","height","viewBox","xmlns","d","href","onClick","sessionStorage","clear","Console","data","map","val","idx","key","Alert","role","msg","Home","state","isErr","getItem","this","history","push","count","document","querySelector","value","setState","isNaN","token","config","headers","Authorization","axios","get","res","auth","htmlFor","type","name","id","placeholder","getFizzBuzz","React","Component","Spinner","color","Login","useState","loading","setLoading","isAlert","setAlert","handleSignIn","e","a","preventDefault","uName","password","trim","length","body","username","post","setItem","action","exact","path","render","to","component","login","home","App","routes","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAkBeA,EAhBA,SAACC,GAIZ,OACI,yBAAKC,UAAU,wCACX,yBAAKA,UAAU,mDACX,yBAAKA,UAAU,4BAA4BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,MAAM,8BAA6B,0BAAMC,EAAE,yVACjI,0BAAML,UAAU,wCAAhB,aAEJ,6BACI,uBAAGM,KAAK,KAAKC,QAVV,WACXC,eAAeC,SASuBT,UAAU,+JAAxC,aCEDU,EAbC,SAACX,GACb,OACI,yBAAKC,UAAU,oDACX,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,0BAAf,WACA,yBAAKA,UAAU,2BACVD,EAAMY,KAAKC,KAAI,SAACC,EAAKC,GAAN,OAAc,yBAAKC,IAAKD,GAAMD,UCGnDG,MATf,SAAejB,GACX,OACI,yBAAKC,UAAU,2EAA2EiB,KAAK,SAC3F,4BAAQjB,UAAU,aAAa,YAC/B,0BAAMA,UAAU,mBAAmBD,EAAMmB,OCqDtCC,E,2MApDbC,MAAQ,CACNC,OAAO,EACPV,KAAM,I,mFAGaH,eAAec,QAAQ,UAExCC,KAAKxB,MAAMyB,QAAQC,KAAK,Y,6JAIpBC,EAAQC,SAASC,cAAc,UAAUC,MAC/CN,KAAKO,SAAS,CAAET,OAAO,KACnBU,MAAML,G,uBACRH,KAAKO,SAAS,CAAET,OAAO,EAAMH,IAAK,wB,+BAEzBQ,EAAQ,GAAKA,EAAQ,K,wBAC9BH,KAAKO,SAAS,CAAET,OAAO,EAAMH,IAAK,gD,kCAG9Bc,EAAQxB,eAAec,QAAQ,SAC/BW,EAAS,CACbC,QAAS,CAAEC,cAAc,UAAD,OAAYH,K,UAEpBI,IAAMC,IAAN,wBAA2BX,GAASO,G,QAAhDK,E,OACWA,EAAT3B,KACC4B,KACPhB,KAAKO,SAAS,CAAET,OAAO,EAAOV,KAAM2B,EAAI3B,KAAKA,OAE7CY,KAAKO,SAAS,CAAET,OAAO,EAAMH,IAAK,0B,sIAG5B,IAAD,SACsBK,KAAKH,MAA1BC,EADD,EACCA,MAAOH,EADR,EACQA,IAAKP,EADb,EACaA,KACpB,OACE,oCACE,kBAAC,EAAD,MACA,yBAAKX,UAAU,iBACb,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,aACb,2BAAOwC,QAAQ,QAAQxC,UAAU,gCAAjC,kBACA,2BAAOyC,KAAK,SAASC,KAAK,QAAQC,GAAG,QAAQ3C,UAAU,uIAAuI4C,YAAY,MAC1M,4BAAQrC,QAAS,kBAAM,EAAKsC,eAAe7C,UAAU,oHAAoHyC,KAAK,UAA9K,SAEApB,EAAQ,kBAAC,EAAD,CAAOH,IAAKA,IAAU,+BAElC,kBAAC,EAAD,CAASP,KAAMA,U,GA/CNmC,IAAMC,W,yBCGVC,MANf,WACE,OACE,yBAAKhD,UAAU,qDAAoD,kBAAC,IAAD,CAAQyC,KAAK,OAAOQ,MAAM,UAAU/C,OAAQ,IAAKD,MAAO,MAA3H,MCiDWiD,EAjDD,SAACnD,GAAW,IAAD,EACSoD,oBAAS,GADlB,mBACdC,EADc,KACLC,EADK,OAEOF,oBAAS,GAFhB,mBAEdG,EAFc,KAELC,EAFK,KAGfC,EAAY,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,yDACjBD,EAAEE,iBACIC,EAAQjC,SAASC,cAAc,aAAaC,MAC5CgC,EAAWlC,SAASC,cAAc,aAAaC,QAChD+B,EAAME,OAAOC,OAAS,GAAOF,EAASC,OAAOC,OAAS,GAJ1C,wBAKbV,GAAW,GACXE,GAAS,GACHS,EAAO,CACTC,SAAUL,EACVC,YATS,SAWKzB,IAAM8B,KAAK,aAAcF,GAX9B,OAWP1B,EAXO,QAYL3B,EAAS2B,EAAT3B,MACC4B,MACL/B,eAAe2D,QAAQ,QAASxD,EAAKqB,OACrCqB,GAAW,GACXtD,EAAMyB,QAAQC,KAAK,QAEnB4B,GAAW,GACXE,GAAS,IAnBA,4CAAH,sDAwBlB,OACI,yBAAKvD,UAAU,mEACToD,EAAU,kBAAC,EAAD,MAAa,8BACvBE,EAAU,kBAAC,EAAD,CAAOpC,IAAI,iCAAoC,8BAC3D,yBAAKlB,UAAU,iDACX,0BAAMoE,OAAO,GAAGpE,UAAU,6CACtB,yBAAKA,UAAU,aACX,2BAAOwC,QAAQ,WAAWxC,UAAU,iCAApC,aACA,2BAAOyC,KAAK,OAAOC,KAAK,WAAWC,GAAG,WAAW3C,UAAU,8IAA8I4C,YAAY,qBAEzN,yBAAK5C,UAAU,aACX,2BAAOwC,QAAQ,WAAWxC,UAAU,gCAApC,YACA,2BAAOyC,KAAK,WAAWC,KAAK,WAAWC,GAAG,WAAW3C,UAAU,6IAA6I4C,YAAY,oBAE5N,yBAAK5C,UAAU,QACX,4BAAQO,QAASiD,EAAcxD,UAAU,+GAA+GyC,KAAK,UAA7J,gBCzCpB,oBAAC,IAAD,KACE,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAO,kBAAC,IAAD,CAAUC,GAAG,aAClD,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,SAASG,UAAWC,IACtC,kBAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,QAAQG,UAAWE,KCG5BC,MARf,WACE,OACE,kBAAC,IAAD,KACGC,ICKaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCVNC,IAASZ,OAAO,kBAAC,EAAD,MAAS5C,SAASyD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cd406774.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) => {\r\n    const logout = () => {\r\n        sessionStorage.clear();\r\n    }\r\n    return (\r\n        <nav className=\"flex justify-between bg-teal-500 p-6\">\r\n            <div className=\"flex items-center flex-shrink-0 text-white mr-6\">\r\n                <svg className=\"fill-current h-8 w-8 mr-2\" width=\"54\" height=\"54\" viewBox=\"0 0 54 54\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.5 22.1c1.8-7.2 6.3-10.8 13.5-10.8 10.8 0 12.15 8.1 17.55 9.45 3.6.9 6.75-.45 9.45-4.05-1.8 7.2-6.3 10.8-13.5 10.8-10.8 0-12.15-8.1-17.55-9.45-3.6-.9-6.75.45-9.45 4.05zM0 38.3c1.8-7.2 6.3-10.8 13.5-10.8 10.8 0 12.15 8.1 17.55 9.45 3.6.9 6.75-.45 9.45-4.05-1.8 7.2-6.3 10.8-13.5 10.8-10.8 0-12.15-8.1-17.55-9.45-3.6-.9-6.75.45-9.45 4.05z\" /></svg>\r\n                <span className=\"font-semibold text-xl tracking-tight\">FizzBuzz</span>\r\n            </div>\r\n            <div>\r\n                <a href=\"/#\" onClick={logout} className=\"inline-block text-sm px-4 py-2 leading-none border rounded text-white border-white hover:border-transparent hover:text-teal-500 hover:bg-white mt-4 lg:mt-0\">Logout</a>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Console = (props) => {\r\n    return (\r\n        <div className=\"max-w-2xl rounded overflow-y-auto shadow-lg h-64\">\r\n            <div className=\"px-6 py-4 min-h-full\">\r\n                <div className=\"font-bold text-xl mb-2\">Console</div>\r\n                <div className=\"text-gray-700 text-base\">\r\n                    {props.data.map((val, idx) => <div key={idx}>{val}</div>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Console;\r\n","import React from 'react';\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\r\n            <strong className=\"font-bold\">{'Error ! '}</strong>\r\n            <span className=\"block sm:inline\">{props.msg}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Alert;","import React from 'react';\r\nimport axios from 'axios';\r\nimport Header from './header';\r\nimport Console from './console';\r\nimport Alert from './alerts';\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    isErr: false,\r\n    data: [],\r\n  }\r\n  componentDidMount() {\r\n    const isSignedIn = sessionStorage.getItem('token');\r\n    if (!isSignedIn) {\r\n      this.props.history.push('/login');\r\n    }\r\n  }\r\n  async getFizzBuzz() {\r\n    const count = document.querySelector('#count').value;\r\n    this.setState({ isErr: false });\r\n    if (isNaN(count)) {\r\n      this.setState({ isErr: true, msg: 'Not a valid number '});\r\n      return;\r\n    } else if (count < 1 || count > 100) {\r\n      this.setState({ isErr: true, msg: 'Count should be greater than 0 and less 101'});\r\n      return;\r\n    }\r\n    const token = sessionStorage.getItem('token');\r\n    const config = {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    };\r\n    const res = await axios.get(`/api/fizzBuzz/${count}`, config);\r\n    const { data } = res;\r\n    if (data.auth) {\r\n      this.setState({ isErr: false, data: res.data.data });\r\n    } else {\r\n      this.setState({ isErr: true, msg: 'Unexpected API error!'});\r\n    }\r\n  }\r\n  render() {\r\n    const { isErr, msg, data } = this.state;\r\n    return (\r\n      <>\r\n        <Header />\r\n        <div className=\"flex flex-col\">\r\n          <div className=\"container py-10 max-w-md\" >\r\n            <div className=\"px-4 pb-4\">\r\n              <label htmlFor=\"count\" className=\"text-xl block font-bold pb-2\">FizzBuzz Count</label>\r\n              <input type=\"number\" name=\"count\" id=\"count\" className=\"shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline border-blue-300 \" placeholder=\"#\" />\r\n              <button onClick={() => this.getFizzBuzz()} className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold ml-2 py-2 px-4 rounded focus:outline-none focus:shadow-outline\" type=\"button\">Boom</button>\r\n            </div>\r\n            {(isErr ? <Alert msg={msg} /> : <div />)}\r\n          </div>\r\n          <Console data={data} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default Home;\r\n","import React from 'react';\r\nimport Loader from 'react-loader-spinner'\r\n\r\nfunction Spinner() {\r\n  return (\r\n    <div className=\"flex justify-center items-center fullpage-overlap\"><Loader type=\"Puff\" color=\"#48bb78\" height={100} width={100} /> </div>\r\n  );\r\n}\r\n\r\nexport default Spinner;","import React, { useState } from 'react';\r\nimport Loader from './loader';\r\nimport axios from 'axios';\r\nimport Alert from './alerts';\r\n\r\nconst Login = (props) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [isAlert, setAlert] = useState(false);\r\n    const handleSignIn = async (e) => {\r\n        e.preventDefault();\r\n        const uName = document.querySelector('#username').value;\r\n        const password = document.querySelector('#password').value;\r\n        if ((uName.trim().length > 0) && (password.trim().length > 0)) {\r\n            setLoading(true);\r\n            setAlert(false);\r\n            const body = {\r\n                username: uName,\r\n                password,\r\n            }\r\n            const res = await axios.post('/api/login', body);\r\n            const { data } = res;\r\n            if (data.auth) {\r\n                sessionStorage.setItem('token', data.token);\r\n                setLoading(false);\r\n                props.history.push('/#');\r\n            } else {\r\n                setLoading(false);\r\n                setAlert(true);\r\n            }\r\n        }\r\n    }\r\n    // if (loading) return (<Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} />)\r\n    return (\r\n        <div className=\"flex justify-center h-screen items-center bg-green-500 flex-col\">\r\n            {(loading ? <Loader /> : <div />)}\r\n            {(isAlert ? <Alert msg=\"Invalid username or password\" /> : <div />)}\r\n            <div className=\"w-full max-w-sm bg-gray-800 rounded shadow-lg\" >  \r\n                <form action=\"\" className=\"bg-white shadow-md rounded px-8 py-8 pt-8\">\r\n                    <div className=\"px-4 pb-4\">\r\n                        <label htmlFor=\"username\" className=\"text-sm block font-bold  pb-2\">User Name</label>\r\n                        <input type=\"text\" name=\"username\" id=\"username\" className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline border-blue-300 \" placeholder=\"Enter user name\" />\r\n                    </div>\r\n                    <div className=\"px-4 pb-4\">\r\n                        <label htmlFor=\"password\" className=\"text-sm block font-bold pb-2\">Password</label>\r\n                        <input type=\"password\" name=\"password\" id=\"password\" className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline border-blue-300\" placeholder=\"Enter password\" />\r\n                    </div>\r\n                    <div className=\"px-4\">\r\n                        <button onClick={handleSignIn} className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\" type=\"button\">Sign In</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Login;\r\n","import React from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport home from './components/home';\r\nimport login from './components/login';\r\n\r\nexport default (\r\n    <Switch>\r\n      <Route exact path=\"/\" render={() => (<Redirect to=\"/home\" />)}/>\r\n      <Route exact path=\"/login\" component={login} />\r\n      <Route exact path=\"/home\" component={home} />\r\n    </Switch>\r\n  );","import React from 'react';\nimport { HashRouter as Router } from 'react-router-dom';\nimport routes from './routes';\n\nfunction App() {\n  return (\n    <Router>\n      {routes}\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/tailwind.css';\nimport './styles/App.css';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}